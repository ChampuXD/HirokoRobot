import logging
import asyncio
import random
import time
import datetime 
from config import BOT_USERNAME, OWNER_ID
from pyrogram import filters, Client
from Hiroko import Hiroko
from pyrogram.enums import ChatType 
from pyrogram.errors import MessageNotModified, InputUserDeactivated, UserNotParticipant, FloodWait, UserIsBlocked, PeerIdInvalid, ChatAdminRequired
from pyrogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from Hiroko.Helper.database.chatsdb import * 
from Hiroko.Helper.database.usersdb import *
from Hiroko.modules.text import SHORTENER_TEXT, ADMINS_TEXT, GITHUB_TEXT, FUN_TEXT, MISC_TEXT, NEKOS_TEXT, GAMES_TEXT, CHATGPT_TEXT, CHATBOT_TEXT, INSTATUS_TEXT, AFK_TEXT, ACTION_TEXT         



# ------------------------------------------------------------------------------- #

START_IMG = (
"https://graph.org/file/f035f0e34969c14ae2e8c.jpg",
"https://graph.org/file/68227791cf9273fbede7a.jpg",
"https://graph.org/file/d91ec80b019d43082965d.jpg",
"https://graph.org/file/d6ae49af114fa50d5ba89.jpg",
"https://graph.org/file/30f6cc0b6251afe5c4153.jpg",
"https://telegra.ph/file/0214edaebad6ef6d69c1d.jpg",
"https://telegra.ph/file/f658925a255bea26efaa4.jpg",
"https://telegra.ph/file/235e4c7e9dd0c48bac638.jpg",

)



# ------------------------------------------------------------------------------- #

START_TEXT = """
** ú·¥á è ·¥õ ú·¥á Ä·¥á [{}](tg://user?id={}) …¥…™·¥Ñ·¥á ·¥õ·¥è ·¥ç·¥á·¥á·¥õ  è·¥è·¥ú !**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ**
‡πè …™ ·¥Ä·¥ç Àπ ú…™Íùõ·¥è·¥ã·¥è Íùõ·¥è ô·¥è·¥õÀº ·¥Ä…¥·¥Ö …™  ú·¥Ä·¥†·¥á s·¥ò·¥á·¥Ñ…™·¥Ä ü “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás
‡πè …™ ·¥Ä·¥ç ·¥Ö…™“ì“ì·¥á Ä·¥á…¥·¥õ “ì Ä·¥è·¥ç ·¥Ä…¥·¥è·¥õ ú·¥á Ä ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ  ô·¥è·¥õs

‡πè ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ú·¥á ü·¥©  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è …¢·¥á·¥õ …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥ç è ·¥ç·¥è·¥Ö·¥ú ü·¥ás ·¥Ä…¥·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös**
"""


# ------------------------------------------------------------------------------- #

HELP_TEXT = """**
¬ª Àπ ú…™Íùõ·¥è·¥ã·¥è Íùõ·¥è ô·¥è·¥õÀº ·¥Ñ·¥è·¥è ü ·¥è Ä ·¥áx·¥Ñ ü·¥ús…™·¥†·¥á “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás 

¬ª ·¥Ä ü ü ·¥èÍú∞ ·¥ç è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ñ·¥Ä…¥  ô·¥á ·¥ús·¥á·¥Ö ·¥°…™·¥õ ú / ·¥è Ä !
¬ª …™Íú∞  è·¥è·¥ú …¢·¥è·¥õ ·¥Ä…¥ è …™ss·¥ú·¥á ·¥è Ä  ô·¥ú…¢ …™…¥ ·¥Ä…¥ è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥ò ü·¥á·¥Äs·¥á  Ä·¥á·¥ò·¥è Ä·¥õ …™·¥õ ·¥Ä·¥õ [s·¥ú·¥©·¥©·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ](https://t.me/TheNixaSupport)**
„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§
‚Ä£<code> /start</code> : **Íú±·¥õ·¥Ä Ä·¥õÍú± ·¥ç·¥á | ·¥Ä·¥Ñ·¥Ñ·¥è Ä·¥Ö…™…¥…¢ ·¥õ·¥è ·¥ç·¥á  è·¥è·¥ú'·¥†·¥á ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ö·¥è…¥·¥á …™·¥õ.**
‚Ä£<code> /donate</code> : **s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥ç·¥á  ô è ·¥Ö·¥è…¥·¥Ä·¥õ…™…¥…¢ Íú∞·¥è Ä ·¥ç è  ú·¥Ä Ä·¥Ö·¥°·¥è Ä·¥ã.**
"""



# ------------------------------------------------------------------------------- #

hiroko_buttons = [              
                [
                    InlineKeyboardButton("·¥Ä“ì·¥ã", callback_data="maintainer_"),   
                    InlineKeyboardButton("·¥Ä·¥Ö·¥ç…™…¥s", callback_data="admins_"),
                    InlineKeyboardButton("“ì·¥ú…¥", callback_data="fun_")
                ],
                [
                    InlineKeyboardButton("…¢…™·¥õ ú·¥ú ô", callback_data="github_"),   
                    InlineKeyboardButton("…™…¥s·¥õ·¥Ä·¥õ·¥ús", callback_data="instatus_"),
                    InlineKeyboardButton("…¥·¥á·¥ã·¥ès", callback_data="nekos_")
                ],
                [
                    InlineKeyboardButton("·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ", callback_data="maintainer_"),   
                    InlineKeyboardButton("·¥ç…™s·¥Ñ", callback_data="misc_"),
                    InlineKeyboardButton("s ú·¥è Ä·¥õ·¥á…¥·¥á Ä", callback_data="shortener_")
                ],
                [
                    InlineKeyboardButton("…¢·¥Ä·¥ç·¥ás", callback_data="action_"),   
                    InlineKeyboardButton("·¥Ñ ú·¥Ä·¥õ…¢·¥ò·¥õ", callback_data="chatgpt_"),
                    InlineKeyboardButton("·¥Ä·¥Ñ·¥õ…™·¥è…¥", callback_data="action_")
                ],             
                [
                    InlineKeyboardButton("‚ü≤  ô·¥Ä·¥Ñ·¥ã ‚ü≥", callback_data="home_"),
                    InlineKeyboardButton("‚ü≤ ·¥Ñ ü·¥èÍú±·¥á ‚ü≥", callback_data="close_data")
                ]
                ]


back_buttons  = [[
                    InlineKeyboardButton("‚ü≤  ô·¥Ä·¥Ñ·¥ã ‚ü≥", callback_data="help_"),                    
                ]]

# ------------------------------------------------------------------------------- #

@Hiroko.on_message(filters.command(["start"], prefixes=["/", "!"]))
async def start(client: Client, message: Message):    
        get_me = await client.get_me()
        BOT_USERNAME = get_me.username
        buttons = [
            [
                InlineKeyboardButton("‚ûï ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚ûï", url=f"https://t.me/{BOT_USERNAME}?startgroup=true")
            ],
            [
                InlineKeyboardButton("‚ú® s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚ú®", url="https://t.me/TheNixaSupport"),
                InlineKeyboardButton("üéì ·¥ç·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥á Ä", url=f"https://t.me/AnonDeveloper"),
            ],
            [
                InlineKeyboardButton("üìö  ú·¥á ü·¥ò ·¥Ä…¥·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös üìö", callback_data="help_")
            ]    
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        await message.reply_photo(
            photo=random.choice(START_IMG),
            caption=START_TEXT.format(message.from_user.first_name, message.from_user.id),
            reply_markup=reply_markup
        )
        await add_served_user(message.from_user.id)            
        await add_served_chat(message.chat.id)


# ------------------------------------------------------------------------------- #

@Hiroko.on_callback_query()
async def cb_handler(client: Client, query: CallbackQuery):
    if query.data=="home_":
        buttons =  [
            [
                InlineKeyboardButton("‚ûï ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚ûï", url=f"https://t.me/{BOT_USERNAME}?startgroup=true")
            ],
            [
                InlineKeyboardButton("‚ú® s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚ú®", url="https://t.me/TheNixaSupport"),
                InlineKeyboardButton("üéì ·¥ç·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥á Ä", url=f"https://t.me/AnonDeveloper"),
            ],
            [
                InlineKeyboardButton("üìö  ú·¥á ü·¥ò ·¥Ä…¥·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös üìö", callback_data="help_")
            ]    
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        try:
            await query.edit_message_text(
                START_TEXT.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass


# ------------------------------------------------------------------------------- #
        
    elif query.data=="help_":        
        reply_markup = InlineKeyboardMarkup(hiroko_buttons)
        try:
            await query.edit_message_text(
                HELP_TEXT.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass

  
# ------------------------------------------------------------------------------- #

    elif query.data=="afk_":        
        reply_markup = InlineKeyboardMarkup(back_buttons)
        try:
            await query.edit_message_text(
                AFK_TEXT.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass

  
# ------------------------------------------------------------------------------- #

    elif query.data=="admins_":        
        reply_markup = InlineKeyboardMarkup(back_buttons)
        try:
            await query.edit_message_text(
                ADMINS_TEXT.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass


# ------------------------------------------------------------------------------- #

    elif query.data=="fun_":        
        reply_markup = InlineKeyboardMarkup(back_buttons)
        try:
            await query.edit_message_text(
                FUN_TEXT.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass 


# ------------------------------------------------------------------------------- #

    elif query.data=="github_":        
        reply_markup = InlineKeyboardMarkup(back_buttons)
        try:
            await query.edit_message_text(
                GITHUB_TEXT.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass


# ------------------------------------------------------------------------------- #

    elif query.data=="instatus_":        
        reply_markup = InlineKeyboardMarkup(back_buttons)
        try:
            await query.edit_message_text(
                INSTATUS_TEXT.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass


# ------------------------------------------------------------------------------- #

    elif query.data=="nekos_":        
        reply_markup = InlineKeyboardMarkup(back_buttons)
        try:
            await query.edit_message_text(
                NEKOS_TEXT.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass


# ------------------------------------------------------------------------------- #

    elif query.data=="chatbot_":        
        reply_markup = InlineKeyboardMarkup(back_buttons)
        try:
            await query.edit_message_text(
                CHATBOT_TEXT.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass


# ------------------------------------------------------------------------------- #

    elif query.data=="misc_":        
        reply_markup = InlineKeyboardMarkup(back_buttons)
        try:
            await query.edit_message_text(
                MISC_TEXT.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass


# ------------------------------------------------------------------------------- #

    elif query.data=="shortener_":        
        reply_markup = InlineKeyboardMarkup(back_buttons)
        try:
            await query.edit_message_text(
                SHORTENER_TEXT.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass


# ------------------------------------------------------------------------------- #

    elif query.data=="games_":        
        reply_markup = InlineKeyboardMarkup(back_buttons)
        try:
            await query.edit_message_text(
                GAMES_TEXT.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass


# ------------------------------------------------------------------------------- #

    elif query.data=="chatgpt_":        
        reply_markup = InlineKeyboardMarkup(back_buttons)
        try:
            await query.edit_message_text(
                CHATGPT_TEXT.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass


# ------------------------------------------------------------------------------- #

    elif query.data=="action_":        
        reply_markup = InlineKeyboardMarkup(back_buttons)
        try:
            await query.edit_message_text(
                ACTION_TEXT.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass


# ------------------------------------------------------------------------------- #

    elif query.data=="maintainer_":
            await query.answer(("s·¥è·¥è…¥.... \n  ô·¥è·¥õ ·¥ú…¥·¥Ö·¥á Ä …™…¥ ·¥ç·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥Ä…¥·¥Ñ·¥á "), show_alert=True)

  
# ------------------------------------------------------------------------------- #
 
    elif query.data=="close_data":
        try:
            await query.message.delete()
            await query.message.reply_to_message.delete()
        except:
            pass
          

# ------------------------------------------------------------------------------- #


    elif query.data=="usercast_":      
        users = await get_served_users()
        status = await query.message.reply_text(
            text="** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ…™…¥…¢  è·¥è·¥ú Ä ·¥ç·¥áss·¥Ä…¢·¥ás...**"
        )
        start_time = time.time()
        done = 0
        deleted = 0
        success = 0

        for user in users:
            success, reason = await broadcast_messages(int(user['user_id']))
            if success:
                success += 1
            elif success is False:
                if reason == "Deleted":
                    deleted += 1
            done += 1

            if not done % 20:
                await status.edit(f"** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ …™…¥ ·¥ò Ä·¥è…¢ Ä·¥áss**:\n\**n·¥õ·¥è·¥õ·¥Ä ü ·¥ús·¥á Äs**: {len(users)}\n**·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö**: {done}/{len(users)}\n**·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö**: {deleted}")

        time_taken = datetime.timedelta(seconds=int(time.time()-start_time))
        await status.edit(f"** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö**:\n\n**·¥õ·¥è·¥õ·¥Ä ü ·¥ús·¥á Äs**: {len(users)}\n**·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥Ö·¥õ·¥á·¥Ö**: {done}/{len(users)}\n**·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö**: {deleted}\n\n**·¥õ…™·¥ç·¥á ·¥õ·¥Ä·¥ã·¥á…¥**: {time_taken}")



# ------------------------------------------------------------------------------- #

  
    elif query.data=="groupcast_":
        chats = await get_served_chats()
        status = await query.message.reply_text(
            text="** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ…™…¥…¢  è·¥è·¥ú Ä ·¥ç·¥áss·¥Ä…¢·¥ás...**"
        )
        start_time = time.time()
        done = 0
        success = 0

        for chat in chats:
            success, reason = await broadcast_messages(int(chat['chat_id']))
            if success:
                success += 1
            done += 1
            await asyncio.sleep(2)
            if not done % 20:
                await status.edit(f"** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ …™…¥ ·¥ò Ä·¥è…¢ Ä·¥áss**:\n\n**·¥õ·¥è·¥õ·¥Ä ü ·¥Ñ ú·¥Ä·¥õs**: {len(chats)}\n**·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö**: {done}/{len(chats)}")

        time_taken = datetime.timedelta(seconds=int(time.time()-start_time))
        await status.edit(f"** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö**:\n\n**·¥õ·¥è·¥õ·¥Ä ü ·¥Ñ ú·¥Ä·¥õs**: {len(chats)}\n**·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö**: {done}/{len(chats)}\n\n**·¥õ…™·¥ç·¥á ·¥õ·¥Ä·¥ã·¥á…¥**: {time_taken}")



# ------------------------------------------------------------------------------- #


async def broadcast_messages(user_id, message):
    try:
        await message.copy(chat_id=user_id)
        return True, "Success"
    except FloodWait as e:
        await asyncio.sleep(e.x)
        return await broadcast_messages(user_id, message)
    except InputUserDeactivated:
        await remove_served_user(int(user_id))
        logging.info(f"{user_id} - Removed from database, since deleted account.")
        return False, "Deleted"
    except UserIsBlocked:
        logging.info(f"{user_id} - Blocked the bot.")
        return False, "Blocked"
    except PeerIdInvalid:
        await remove_served_user(int(user_id))
        logging.info(f"{user_id} - PeerIdInvalid")
        return False, "Error"
    except Exception as e:
        return False, "Error"


# ------------------------------------------------------------------------------- #



